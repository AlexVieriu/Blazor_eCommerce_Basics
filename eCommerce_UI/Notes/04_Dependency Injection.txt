37. Dependency Injection

https://www.youtube.com/watch?v=EPv9-cHEmQw&t=250s&ab_channel=TheSimpleEngineer

-> what we usually see is class User will initialize a sql object and call methods to 
create, read, update, delete information (ex: SaveChangesAsync, AddAsync, Remove, AnyAsync, Update)

Inversion of Control(IoC)
-> objects do not create other objects on which they rely to do their work, instead, 
they get objects that they need from an outside source

ex:
-> instead of the User initialiazing another object, we have a framework that initialize 
the DB object for us and pass it to us as a parameter 


Depnedency Injection:
-> passing a dependent object as a parameter to a method, rather than having the 
method create the dependent object
-> the methods does not have a direct dependency on a particular implementation
-> any implementation that meets the requirements can be passed as a parameter


38. Lifetime Management in Blazor Server

-> AddTransient, AddSCoped, AddSingleton

-> when a component is instantiated, blazor framework use de dependency injection and create 
a new instance of the CustomerService class and give it to the component


-- Index.razor --

UI:
-> inject the 2 interfaces: ICustomerScoped, ICustomerSingleton
-> implement IDispose 
-> create a table that display the 2 Guids

@code{
	Dispose()
} 


39. How to choose Lifetime Management

Scoped:
-> if you want to use some classes to use some data try to implement state management that way, you don't want to use Singleton
because you are sharing the data across all users
-> it is used for one particular connection
-> can't be shared in different browsers


40. Lifetime Management in Blazor WebAssembly

-> is the same as in Blazor Server

public static async Task Main(string[] args)
{
    var builder = WebAssemblyHostBuilder.CreateDefault(args);
    builder.RootComponents.Add<App>("#app");

    builder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });

    builder.Services.AddScoped<ICustomerScoped, CustomerServices>();
    builder.Services.AddSingleton<ICustomerSingleton, CustomerServices>();

    await builder.Build().RunAsync();
}